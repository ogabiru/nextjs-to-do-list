import React, {useState, useEffect} from 'react'
import Head from 'next/head'
import TodoList from '../components/TodoList'
import Modal from '../components/Modal'

import {
  getTodos,
  createTodo,
  updateTodo,
  deleteTodo
} from '../services/http'

import styles from '../styles/Global.module.css'

export default function App() {
  const [todos, setTodos] = useState([])
  const [modalTodo, setModalTodo] = useState({open: false})
  const [modalError, setModalError] = useState({open: false})

  const openModal = (item) => {
    setModalTodo({open: true, activeTodo: item})
  }
  const closeModal = () => {
    setModalTodo({open: false})
  }

  const openErrorModal = (title, desc) => {
    setModalError({open: true, title: title, desc: desc})
  }
  const closeErrorModal = () => {
    setModalError({open: false})
  }

  const allTodos = async () => {
    try {
      setTodos(await getTodos())
    } catch (err) {
      console.log(err)
    }
  }

  const newTodo = async (title, description) => {
    try {
      const res = await createTodo({title: title, description: description})
      if (res.error !== undefined) {
        openErrorModal('Error', res.error)
      } else {
        allTodos()
      }
    } catch (err) {
      console.log(err)
    }
  }

  const removeTodo = async () => {
    try {
      await deleteTodo(modalTodo.activeTodo.id)
      allTodos()
    } catch (err) {
      console.log(err)
    }
    closeModal()
  }

  const startTodo = async (todo) => {
    try {
      await updateTodo(todo.id,
        {
          title: todo.title,
          description: todo.description,
          started_at: new Date().getTime(),
          paused_at: null,
          finished_at: null,
          time_spent: todo.time_spent
        }
      )
      allTodos()
    } catch (err) {
      console.log(err)
    }
  }

  const pauseTodo = async (todo) => {
    try {
      await updateTodo(todo.id,
        {
          title: todo.title,
          description: todo.description,
          started_at: null,
          paused_at: new Date().getTime(),
          finished_at: null,
          time_spent: (todo.time_spent + (new Date().getTime() - todo.started_at))
        }
      )
      allTodos()
    } catch (err) {
      console.log(err)
    }
  }

  const finishTodo = async (todo) => {
    try {
      await updateTodo(todo.id,
        {
          title: todo.title,
          description: todo.description,
          started_at: null,
          paused_at: null,
          finished_at: new Date().getTime(),
          time_spent: (todo.time_spent + (new Date().getTime() - todo.started_at))
        }
      )
      allTodos()
    } catch (err) {
      console.log(err)
    }
  }

  useEffect(async () => {
    allTodos()
  }, [])

  return (
    <div id="app" className={styles.container}>
      <Head>
        <title>My TO DO List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <TodoList
          todos={todos}
          remove={openModal}
          create={newTodo}
          start={startTodo}
          pause={pauseTodo}
          finish={finishTodo} />
      </main>
      <Modal
        open={modalTodo.open}
        title="Delete this to do?"
        content="Are you sure you want to delete this to do?"
        actionTitle="Delete"
        action={removeTodo}
        close={closeModal}
      />
      <Modal
        open={modalError.open}
        title={modalError.title}
        content={modalError.desc}
        close={closeErrorModal}
      />
    </div>
  )
}
